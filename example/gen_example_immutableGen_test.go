// Copyright (c) 2016 Paul Jolly <paul@myitcv.org.uk>, all rights reserved.
// Use of this document is governed by a license found in the LICENSE document.

// File generated by immutableGen

package example

//go:generate echo "hello world"

import (
	"github.com/myitcv/immutable"
)

//
// myTestMap is an immutable type and has the following template:
//
// 	map[string]int
//
type myTestMap struct {
	//github.com/myitcv/immutable:ImmutableType

	theMap  map[string]int
	mutable bool
}

var _ immutable.Immutable = &myTestMap{}

func newMyTestMap() *myTestMap {
	return &myTestMap{
		theMap: make(map[string]int),
	}
}

func newMyTestMapLen(l int) *myTestMap {
	return &myTestMap{
		theMap: make(map[string]int, l),
	}
}

func (m *myTestMap) Mutable() bool {
	return m.mutable
}

func (m *myTestMap) Len() int {
	if m == nil {
		return 0
	}

	return len(m.theMap)
}

func (m *myTestMap) Get(k string) (int, bool) {
	v, ok := m.theMap[k]
	return v, ok
}

func (m *myTestMap) AsMutable() *myTestMap {
	if m == nil {
		return nil
	}

	res := m.dup()
	res.mutable = true

	return res
}

func (m *myTestMap) dup() *myTestMap {
	resMap := make(map[string]int, len(m.theMap))

	for k := range m.theMap {
		resMap[k] = m.theMap[k]
	}

	res := &myTestMap{
		theMap: resMap,
	}

	return res
}

func (m *myTestMap) AsImmutable() *myTestMap {
	if m == nil {
		return nil
	}

	m.mutable = false

	return m
}

func (m *myTestMap) Range() map[string]int {
	if m == nil {
		return nil
	}

	return m.theMap
}

func (m *myTestMap) WithMutations(f func(mi *myTestMap)) *myTestMap {
	res := m.AsMutable()
	f(res)
	res = res.AsImmutable()

	return res
}

func (m *myTestMap) Set(k string, v int) *myTestMap {
	if m.mutable {
		m.theMap[k] = v
		return m
	}

	res := m.dup()
	res.theMap[k] = v

	return res
}

func (m *myTestMap) Del(k string) *myTestMap {
	if _, ok := m.theMap[k]; !ok {
		return m
	}

	if m.mutable {
		delete(m.theMap, k)
		return m
	}

	res := m.dup()
	delete(res.theMap, k)

	return res
}
