// My favourite license

// File generated by immutableGen

package main

//go:generate echo "hello world"

import (
	"github.com/myitcv/immutable"
)

// a comment about MyMap
//
// MyMap is an immutable type and has the following template:
//
// 	map[string]int
//
type MyMap struct {
	//github.com/myitcv/immutable:ImmutableType

	theMap  map[string]int
	mutable bool
}

var _ immutable.Immutable = &MyMap{}

func NewMyMap() *MyMap {
	return &MyMap{
		theMap: make(map[string]int),
	}
}

func NewMyMapLen(l int) *MyMap {
	return &MyMap{
		theMap: make(map[string]int, l),
	}
}

func (m *MyMap) Mutable() bool {
	return m.mutable
}

func (m *MyMap) Len() int {
	if m == nil {
		return 0
	}

	return len(m.theMap)
}

func (m *MyMap) Get(k string) (int, bool) {
	v, ok := m.theMap[k]
	return v, ok
}

func (m *MyMap) AsMutable() *MyMap {
	if m == nil {
		return nil
	}

	res := m.dup()
	res.mutable = true

	return res
}

func (m *MyMap) dup() *MyMap {
	resMap := make(map[string]int, len(m.theMap))

	for k := range m.theMap {
		resMap[k] = m.theMap[k]
	}

	res := &MyMap{
		theMap: resMap,
	}

	return res
}

func (m *MyMap) AsImmutable() *MyMap {
	if m == nil {
		return nil
	}

	m.mutable = false

	return m
}

func (m *MyMap) Range() map[string]int {
	if m == nil {
		return nil
	}

	return m.theMap
}

func (m *MyMap) WithMutations(f func(mi *MyMap)) *MyMap {
	res := m.AsMutable()
	f(res)
	res = res.AsImmutable()

	return res
}

func (m *MyMap) Set(k string, v int) *MyMap {
	if m.mutable {
		m.theMap[k] = v
		return m
	}

	res := m.dup()
	res.theMap[k] = v

	return res
}

func (m *MyMap) Del(k string) *MyMap {
	if _, ok := m.theMap[k]; !ok {
		return m
	}

	if m.mutable {
		delete(m.theMap, k)
		return m
	}

	res := m.dup()
	delete(res.theMap, k)

	return res
}

// a comment about Slice
//
// MySlice is an immutable type and has the following template:
//
// 	[]*string
//
type MySlice struct {
	//github.com/myitcv/immutable:ImmutableType

	theSlice []*string
	mutable  bool
}

var _ immutable.Immutable = &MySlice{}

func NewMySlice(s ...*string) *MySlice {
	c := make([]*string, len(s))
	copy(c, s)

	return &MySlice{
		theSlice: c,
	}
}

func NewMySliceLen(l int) *MySlice {
	c := make([]*string, l)

	return &MySlice{
		theSlice: c,
	}
}

func (m *MySlice) Mutable() bool {
	return m.mutable
}

func (m *MySlice) Len() int {
	if m == nil {
		return 0
	}

	return len(m.theSlice)
}

func (m *MySlice) Get(i int) *string {
	return m.theSlice[i]
}

func (m *MySlice) AsMutable() *MySlice {
	if m == nil {
		return nil
	}

	res := m.dup()
	res.mutable = true

	return res
}

func (m *MySlice) dup() *MySlice {
	resSlice := make([]*string, len(m.theSlice))

	for i := range m.theSlice {
		resSlice[i] = m.theSlice[i]
	}

	res := &MySlice{
		theSlice: resSlice,
	}

	return res
}

func (m *MySlice) AsImmutable() *MySlice {
	if m == nil {
		return nil
	}

	m.mutable = false

	return m
}

func (m *MySlice) Range() []*string {
	if m == nil {
		return nil
	}

	return m.theSlice
}

func (m *MySlice) WithMutations(f func(mi *MySlice)) *MySlice {
	res := m.AsMutable()
	f(res)
	res = res.AsImmutable()

	// TODO optimise here if the maps are identical?

	return res
}

func (m *MySlice) Set(i int, v *string) *MySlice {
	if m.mutable {
		m.theSlice[i] = v
		return m
	}

	res := m.dup()
	res.theSlice[i] = v

	return res
}

func (m *MySlice) Append(v ...*string) *MySlice {
	if m.mutable {
		m.theSlice = append(m.theSlice, v...)
		return m
	}

	res := m.dup()
	res.theSlice = append(res.theSlice, v...)

	return res
}

// a comment about myStruct
//
// MyStruct is an immutable type and has the following template:
//
// 	struct {
// 		Name, surname	string
// 		age		int
//
// 		fieldWithoutTag	bool
// 	}
//
type MyStruct struct {
	//github.com/myitcv/immutable:ImmutableType
	//somethingspecial

	_Name, _surname  string `tag:"value"`
	_age             int    `tag:"age"`
	_fieldWithoutTag bool

	mutable bool
}

var _ immutable.Immutable = &MyStruct{}

func (s *MyStruct) AsMutable() *MyStruct {
	res := *s
	res.mutable = true
	return &res
}

func (s *MyStruct) AsImmutable() *MyStruct {
	s.mutable = false
	return s
}

func (s *MyStruct) Mutable() bool {
	return s.mutable
}

func (s *MyStruct) WithMutations(f func(si *MyStruct)) *MyStruct {
	res := s.AsMutable()
	f(res)
	res = res.AsImmutable()

	return res
}

// my field comment
//somethingspecial
/*

	Heelo

*/
func (s *MyStruct) Name() string {
	return s._Name
}

// SetName is the setter for Name()
func (s *MyStruct) SetName(n string) *MyStruct {
	if s.mutable {
		s._Name = n
		return s
	}

	res := *s
	res._Name = n
	return &res
}

// my field comment
//somethingspecial
/*

	Heelo

*/
func (s *MyStruct) surname() string {
	return s._surname
}

// setSurname is the setter for Surname()
func (s *MyStruct) setSurname(n string) *MyStruct {
	if s.mutable {
		s._surname = n
		return s
	}

	res := *s
	res._surname = n
	return &res
}
func (s *MyStruct) age() int {
	return s._age
}

// setAge is the setter for Age()
func (s *MyStruct) setAge(n int) *MyStruct {
	if s.mutable {
		s._age = n
		return s
	}

	res := *s
	res._age = n
	return &res
}
func (s *MyStruct) fieldWithoutTag() bool {
	return s._fieldWithoutTag
}

// setFieldWithoutTag is the setter for FieldWithoutTag()
func (s *MyStruct) setFieldWithoutTag(n bool) *MyStruct {
	if s.mutable {
		s._fieldWithoutTag = n
		return s
	}

	res := *s
	res._fieldWithoutTag = n
	return &res
}
